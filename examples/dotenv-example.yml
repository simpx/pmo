# 使用.env文件作为环境变量的简化Servly配置示例

# .env文件示例内容:
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=myapp
# DB_USER=postgres
# DB_PASS=secret
# API_KEY=your_api_key_here

# Python应用示例
web-app:
  cmd: >
    python -c "
    import os, sys, time, dotenv
    
    # 加载环境变量
    dotenv.load_dotenv('.env')
    
    # 显示数据库连接信息
    print(f'数据库: {os.environ.get(\"DB_USER\", \"[未设置]\")}@{os.environ.get(\"DB_HOST\", \"[未设置]\")}:{os.environ.get(\"DB_PORT\", \"[未设置]\")}')
    print(f'API密钥: {os.environ.get(\"API_KEY\", \"[未设置]\")}')
    
    # 模拟服务运行
    while True:
        print('服务运行中...')
        time.sleep(10)
    "
  env:
    LOG_LEVEL: debug
    SERVICE_PORT: "8080"

# Node.js应用示例
node-app:
  cmd: >
    node -r dotenv/config -e "
    console.log('环境变量加载成功');
    console.log('数据库: ' + process.env.DB_NAME);
    console.log('服务端口: ' + process.env.SERVICE_PORT);
    "

# Shell脚本示例
db-backup:
  cmd: |
    # 加载并使用环境变量
    set -a
    source .env
    set +a
    
    echo "数据库信息: $DB_USER@$DB_HOST:$DB_PORT/$DB_NAME"
    echo "创建备份文件: backup_$(date +%Y%m%d).sql"
    echo "-- 模拟数据库备份" > backup_$(date +%Y%m%d).sql

# 环境变量覆盖示例
api-server:
  cmd: >
    python -c "
    import os, time
    
    # 显示密钥信息（已隐藏）
    jwt_secret = os.environ.get('JWT_SECRET', 'default_key')
    print(f'JWT密钥: {"*" * len(jwt_secret)}')
    print('API服务器运行在 http://localhost:3000')
    
    while True:
        time.sleep(10)
        print('API请求处理中...')
    "
  env:
    JWT_SECRET: dev_jwt_secret
    REDIS_PASSWORD: dev_password