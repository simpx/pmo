# 超长命令行的 Servly 配置示例
# 展示如何优雅地处理复杂的命令，同时使用常见工具确保用户可直接运行

# 文件查找和统计示例 - 使用 find 和 grep (几乎所有 Linux/Mac 系统都有)
file-finder:
  cmd: >
    find /usr/share/doc 
    -type f 
    -name "*.md" 
    -o -name "*.txt" 
    | grep -v "README" 
    | sort 
    | head -n 20 
    | xargs wc -l 
    | sort -nr

# 系统监控示例 - 使用常见的系统工具
system-monitor:
  cmd: |
    while true; do 
      echo "===== $(date) ====="
      echo "内存使用情况:"
      free -h
      echo -e "\nCPU负载情况:"
      uptime
      echo -e "\n磁盘使用情况:"
      df -h | grep -v "tmpfs"
      echo -e "\n进程数量:"
      ps aux | wc -l
      echo -e "\n==============================\n"
      sleep 10
    done

# HTTP 请求测试工具 - 使用常见的 curl 命令
url-checker:
  cmd: >
    curl 
    --connect-timeout 5
    --max-time 10
    --retry 3
    --retry-delay 2
    --retry-max-time 30
    -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36"
    -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
    -s -L -o /dev/null -w "状态码: %{http_code}\n大小: %{size_download} bytes\n时间: %{time_total} 秒\n"
    https://www.baidu.com

# Python 脚本示例 - 使用系统自带的 Python
log-analyzer:
  cmd: |
    python3 -c "
    import os
    import re
    import time
    from datetime import datetime
    
    print('开始日志分析...')
    
    # 模拟日志分析过程
    for i in range(1, 6):
        print(f'[{datetime.now().strftime(\"%H:%M:%S\")}] 分析批次 {i}/5...')
        
        # 处理每个批次的模拟工作
        for j in range(3):
            print(f'  - 处理子任务 {j+1}/3')
            time.sleep(1)
    
    print('\\n分析结果统计:')
    print('- 处理文件数: 42')
    print('- 成功率: 98.2%')
    print('- 处理时间: 15.4秒')
    print('\\n日志分析完成！')
    "