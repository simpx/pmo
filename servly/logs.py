"""
Log management functionality for Servly.
"""
import os
import sys
import time
import select
import fcntl
import termios
import subprocess
import re
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import random


# ANSI È¢úËâ≤‰ª£Á†Å
class Colors:
    RESET = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"
    
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    WHITE = "\033[37m"
    
    BRIGHT_BLACK = "\033[90m"
    BRIGHT_RED = "\033[91m"
    BRIGHT_GREEN = "\033[92m"
    BRIGHT_YELLOW = "\033[93m"
    BRIGHT_BLUE = "\033[94m"
    BRIGHT_MAGENTA = "\033[95m"
    BRIGHT_CYAN = "\033[96m"
    BRIGHT_WHITE = "\033[97m"
    
    # ËÉåÊôØËâ≤
    BG_BLACK = "\033[40m"
    BG_RED = "\033[41m"
    BG_GREEN = "\033[42m"
    BG_YELLOW = "\033[43m"
    BG_BLUE = "\033[44m"
    BG_MAGENTA = "\033[45m"
    BG_CYAN = "\033[46m"
    BG_WHITE = "\033[47m"


# ÊúçÂä°Áõ∏ÂÖ≥ÁöÑ emoji
class Emojis:
    SERVICE = "üîß"
    START = "üü¢"
    STOP = "üî¥"
    RESTART = "üîÑ"
    INFO = "‚ÑπÔ∏è "
    WARNING = "‚ö†Ô∏è "
    ERROR = "‚ùå"
    LOG = "üìù"
    STDOUT = "üì§"
    STDERR = "üì•"
    TIME = "üïí"
    RUNNING = "‚úÖ"
    STOPPED = "‚õî"
    LOADING = "‚è≥"


# Â§ÑÁêÜÂΩ©Ëâ≤ÊñáÊú¨ÂØπÈΩêÁöÑËæÖÂä©ÂáΩÊï∞
def strip_ansi_codes(text: str) -> str:
    """Âà†Èô§Â≠óÁ¨¶‰∏≤‰∏≠ÁöÑÊâÄÊúâ ANSI ËΩ¨‰πâ‰ª£Á†Å"""
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    return ansi_escape.sub('', text)

def get_visible_length(text: str) -> int:
    """Ëé∑ÂèñÊñáÊú¨Âú®ÁªàÁ´Ø‰∏≠ÁöÑÂèØËßÅÈïøÂ∫¶ÔºàÊéíÈô§ ANSI ‰ª£Á†ÅÂíåÂÆΩÂ≠óÁ¨¶Ôºâ"""
    text = strip_ansi_codes(text)
    # Â§ÑÁêÜ‰∏≠ÊñáÁ≠âÂÆΩÂ≠óÁ¨¶ÔºàÂú®Â§ßÂ§öÊï∞ÁªàÁ´Ø‰∏≠Âç†Áî®‰∏§‰∏™Â≠óÁ¨¶ÂÆΩÂ∫¶Ôºâ
    length = 0
    for char in text:
        if ord(char) > 127:  # ÁÆÄÂçïÂà§Êñ≠ÊòØÂê¶ÊòØÈùûASCIIÂ≠óÁ¨¶
            length += 2
        else:
            length += 1
    return length

def align_colored_text(text: str, width: int, align='left') -> str:
    """
    Â∞ÜÂΩ©Ëâ≤ÊñáÊú¨ÂØπÈΩêÂà∞ÊåáÂÆöÂÆΩÂ∫¶
    
    Args:
        text: ÂèØËÉΩÂåÖÂê´ ANSI È¢úËâ≤‰ª£Á†ÅÁöÑÊñáÊú¨
        width: ÊúüÊúõÁöÑÊòæÁ§∫ÂÆΩÂ∫¶
        align: ÂØπÈΩêÊñπÂºèÔºå'left', 'right' Êàñ 'center'
        
    Returns:
        ÂØπÈΩêÂêéÁöÑÊñáÊú¨Ôºå‰øùÁïôÈ¢úËâ≤‰ª£Á†Å
    """
    visible_length = get_visible_length(text)
    padding = max(0, width - visible_length)
    
    if align == 'right':
        return ' ' * padding + text
    elif align == 'center':
        left_padding = padding // 2
        right_padding = padding - left_padding
        return ' ' * left_padding + text + ' ' * right_padding
    else:  # left alignment
        return text + ' ' * padding


class LogManager:
    """Handles viewing and managing logs for servly services."""
    
    def __init__(self, log_dir: Path):
        self.log_dir = log_dir
        # ‰∏∫ÊØè‰∏™ÊúçÂä°ÂàÜÈÖç‰∏Ä‰∏™Âõ∫ÂÆöÈ¢úËâ≤Ôºå‰ΩøÊó•ÂøóÊõ¥ÊòìËØª
        self.service_colors = {}
        self.available_colors = [
            Colors.GREEN, Colors.YELLOW, Colors.BLUE, Colors.MAGENTA, Colors.CYAN,
            Colors.BRIGHT_GREEN, Colors.BRIGHT_YELLOW, Colors.BRIGHT_BLUE, 
            Colors.BRIGHT_MAGENTA, Colors.BRIGHT_CYAN
        ]
        self.default_tail_lines = 15  # ÈªòËÆ§Â±ïÁ§∫ÊúÄÂêé15Ë°åÊó•Âøó
        
    def get_log_files(self, service_name: str) -> Dict[str, Path]:
        """Get the stdout and stderr log files for a service."""
        return {
            'stdout': self.log_dir / f"{service_name}-out.log",
            'stderr': self.log_dir / f"{service_name}-error.log"
        }
    
    def _get_service_color(self, service_name: str) -> str:
        """‰∏∫ÊúçÂä°ÂàÜÈÖç‰∏Ä‰∏™Âõ∫ÂÆöÁöÑÈ¢úËâ≤"""
        if service_name not in self.service_colors:
            if not self.available_colors:
                # Â¶ÇÊûúÈ¢úËâ≤Áî®ÂÆå‰∫ÜÔºåÂ∞±ÈöèÊú∫ÂàÜÈÖç
                self.service_colors[service_name] = random.choice([
                    Colors.GREEN, Colors.YELLOW, Colors.BLUE, Colors.MAGENTA, Colors.CYAN
                ])
            else:
                # ‰ªéÂèØÁî®È¢úËâ≤‰∏≠ÈÄâÊã©‰∏Ä‰∏™
                self.service_colors[service_name] = self.available_colors.pop(0)
        return self.service_colors[service_name]
    
    def _format_log_header(self, service: str, log_type: str) -> str:
        """Ê†ºÂºèÂåñÊó•ÂøóÂ§¥ÈÉ®ÔºåPM2Ê†ºÂºè"""
        # Ëé∑ÂèñÊñá‰ª∂Ë∑ØÂæÑÁî®‰∫éÊòæÁ§∫
        log_files = self.get_log_files(service)
        file_path = log_files[log_type]
        file_path_str = str(file_path)
        
        # PM2È£éÊ†ºÁöÑÂ§¥ÈÉ®
        return f"\n{Colors.BRIGHT_BLACK}{file_path_str} last {self.default_tail_lines} lines:{Colors.RESET}"
    
    def _format_log_line(self, service: str, log_type: str, line: str, show_timestamp: bool = True) -> str:
        """Ê†ºÂºèÂåñÂçïË°åÊó•ÂøóÔºåPM2Ê†ºÂºè"""
        # ‰ΩøÁî®Á∫¢Ëâ≤ÊòæÁ§∫stderrÁöÑÊúçÂä°ÂêçÁß∞ÔºåÁªøËâ≤ÊòæÁ§∫stdoutÁöÑÊúçÂä°ÂêçÁß∞
        service_color = Colors.RED if log_type == 'stderr' else Colors.GREEN
        timestamp = ""
        
        # Â∞ùËØïÊèêÂèñÊó∂Èó¥Êà≥ÔºåÊàñ‰øùÊåÅÂéüÊù•ÁöÑË°å
        timestamp_match = re.search(r'(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})', line)
        if timestamp_match:
            timestamp = timestamp_match.group(1)
            # ÁßªÈô§Ë°å‰∏≠Â∑≤ÊúâÁöÑÊó∂Èó¥Êà≥ÈÉ®ÂàÜ
            rest_of_line = line.replace(timestamp, "", 1).lstrip()
        else:
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            rest_of_line = line
        
        # PM2È£éÊ†ºÁöÑË°åÊ†ºÂºèÔºöÊúçÂä°Âêç | Êó∂Èó¥: ÂÜÖÂÆπ
        return f"{service_color}{service}{Colors.RESET} | {timestamp}: {rest_of_line.rstrip()}"
    
    def tail_logs(self, service_names: List[str], follow: bool = True, lines: int = None):
        """
        Display logs for specified services in real-time.
        
        Args:
            service_names: List of service names to show logs for
            follow: Whether to follow logs in real-time (like tail -f)
            lines: Number of recent lines to display initially, defaults to self.default_tail_lines
        """
        if lines is None:
            lines = self.default_tail_lines
            
        if not service_names:
            print(f"{Emojis.WARNING} {Colors.YELLOW}No services specified for log viewing.{Colors.RESET}")
            return

        # Check if the logs exist
        log_files = []
        for service in service_names:
            service_logs = self.get_log_files(service)
            for log_type, log_path in service_logs.items():
                if log_path.exists():
                    log_files.append((service, log_type, log_path))
                else:
                    service_color = Colors.RED if log_type == 'stderr' else Colors.GREEN
                    print(f"{Emojis.WARNING} {Colors.YELLOW}No {log_type} logs found for {service_color}{service}{Colors.RESET}.")
                    
        if not log_files:
            print(f"{Emojis.WARNING} {Colors.YELLOW}No log files found for specified services.{Colors.RESET}")
            return
            
        if follow:
            # È¶ñÂÖàÊòæÁ§∫ÊúÄÂêéÂá†Ë°åÔºåÁÑ∂ÂêéÂÜçÂºÄÂßãË∑üË∏™
            self._display_recent_logs(log_files, lines)
            self._follow_logs(log_files)
        else:
            self._display_recent_logs(log_files, lines)
    
    def _display_recent_logs(self, log_files: List[Tuple[str, str, Path]], lines: int):
        """Display the most recent lines from log files."""
        for service, log_type, log_path in log_files:
            print(self._format_log_header(service, log_type))
            try:
                # ËØªÂèñÊúÄÂêéNË°å
                with open(log_path, 'r') as f:
                    content = f.readlines()
                    last_lines = content[-lines:] if len(content) >= lines else content
                    
                    # ÊâìÂç∞ÊØè‰∏ÄË°åÔºåÂ¢ûÂä†Ê†ºÂºè
                    for line in last_lines:
                        print(self._format_log_line(service, log_type, line, show_timestamp=False))
            except Exception as e:
                print(f"{Emojis.ERROR} {Colors.RED}Error reading logs: {str(e)}{Colors.RESET}")
    
    def _follow_logs(self, log_files: List[Tuple[str, str, Path]]):
        """Follow logs in real-time, similar to tail -f."""
        # Dictionary to keep track of file positions
        file_handlers = {}
        
        try:
            # Open all log files
            for service, log_type, log_path in log_files:
                f = open(log_path, 'r')
                # Move to the end of the file
                f.seek(0, os.SEEK_END)
                file_handlers[(service, log_type)] = f
                
            print(f"\n{Colors.BRIGHT_BLACK}Following logs... (Ctrl+C to stop){Colors.RESET}")
            
            while True:
                has_new_data = False
                
                for (service, log_type), f in file_handlers.items():
                    line = f.readline()
                    if line:
                        has_new_data = True
                        print(self._format_log_line(service, log_type, line))
                
                if not has_new_data:
                    time.sleep(0.1)
                    
        except KeyboardInterrupt:
            print(f"\n{Colors.BRIGHT_BLACK}Stopped following logs.{Colors.RESET}")
        finally:
            # Close all file handlers
            for f in file_handlers.values():
                f.close()